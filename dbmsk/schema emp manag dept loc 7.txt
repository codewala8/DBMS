/*Consider Following Schema 
Employee( Employee_id, First_name, Last_name, Hire_date, Salary, Job_title, 
Manager_id, department_id) 
Department(Department_id, Department_name, Manager_id, Location_id) 
Locations(Location_id, Street_address, Postal_code, city, state, Country_id) 
Manager(Manager_id, Manager_name) 
Create the tables with referential integrity. Solve following queries using joins and 
subqueries. 
1. Write a query to find the names(first_name, last_name), the salary of the employees 
who earn more than the average salary and who works in any of the IT departments. 
2. Write a query to find the names(first_name, last_name), the salary of the employees 
who earn the same salary as minimum salary for all departments. 
3. Write a query to display the employee ID, first name, last names, salary of all 
employees whose salary is above average for their departments. 
4. Write a query to display the department name, manager name, and city. 
5. Write a query to display the name(first_name, last_name), hire date, salary of all 
managers whose experience is more than 15 years. */
-- Create the database
CREATE DATABASE CompanyDB;
USE CompanyDB;
drop database CompanyDB;
-- Create Locations table
CREATE TABLE Locations (
    Location_id INT PRIMARY KEY,
    Street_address VARCHAR(100),
    Postal_code VARCHAR(20),
    City VARCHAR(50),
    State VARCHAR(50),
    Country_id INT
);

-- Create Manager table
CREATE TABLE Manager (
    Manager_id INT PRIMARY KEY,
    Manager_name VARCHAR(100)
);

-- Create Department table
CREATE TABLE Department (
    Department_id INT PRIMARY KEY,
    Department_name VARCHAR(100),
    Manager_id INT,
    Location_id INT,
    FOREIGN KEY (Manager_id) REFERENCES Manager(Manager_id),
    FOREIGN KEY (Location_id) REFERENCES Locations(Location_id)
);

-- Create Employee table
CREATE TABLE Employee (
    Employee_id INT PRIMARY KEY,
    First_name VARCHAR(50),
    Last_name VARCHAR(50),
    Hire_date DATE,
    Salary DECIMAL(10, 2),
    Job_title VARCHAR(50),
    Manager_id INT,
    Department_id INT,
    FOREIGN KEY (Manager_id) REFERENCES Manager(Manager_id),
    FOREIGN KEY (Department_id) REFERENCES Department(Department_id)
);

-- Insert sample data into Locations
INSERT INTO Locations (Location_id, Street_address, Postal_code, City, State, Country_id) VALUES
(1, '123 Main St', '12345', 'New York', 'NY', 1),
(2, '456 Elm St', '67890', 'Los Angeles', 'CA', 1);

-- Insert sample data into Manager
INSERT INTO Manager (Manager_id, Manager_name) VALUES
(1, 'Alice Johnson'),
(2, 'Bob Smith');

-- Insert sample data into Department
INSERT INTO Department (Department_id, Department_name, Manager_id, Location_id) VALUES
(1, 'IT', 1, 1),
(2, 'HR', 2, 2);

-- Insert sample data into Employee
INSERT INTO Employee (Employee_id, First_name, Last_name, Hire_date, Salary, Job_title, Manager_id, Department_id) VALUES
(1, 'John', 'Doe', '2020-01-10', 60000.00, 'Developer', 1, 1),
(2, 'Jane', 'Smith', '2019-03-15', 80000.00, 'Manager', 1, 1),
(3, 'Sam', 'Brown', '2021-06-20', 50000.00, 'Recruiter', 2, 2),
(4, 'Sara', 'Davis', '2018-11-30', 55000.00, 'Analyst', 1, 1);

-- Query 1: Employees earning more than the average salary in IT departments
SELECT First_name, Last_name, Salary
FROM Employee
WHERE Salary > (
    SELECT AVG(Salary) 
    FROM Employee 
    WHERE Department_id = (SELECT Department_id FROM Department WHERE Department_name = 'IT')
);

-- Query 2: Employees earning the same salary as the minimum salary across all departments
SELECT First_name, Last_name, Salary
FROM Employee
WHERE Salary = (SELECT MIN(Salary) FROM Employee);

-- Query 3: Employees whose salary is above average for their departments
SELECT Employee_id, First_name, Last_name, Salary
FROM Employee E
WHERE Salary > (
    SELECT AVG(Salary) 
    FROM Employee 
    WHERE Department_id = E.Department_id
);

-- Query 4: Display the department name, manager name, and city
SELECT D.Department_name, M.Manager_name, L.City
FROM Department D
JOIN Manager M ON D.Manager_id = M.Manager_id
JOIN Locations L ON D.Location_id = L.Location_id;

-- Query 5: Managers with more than 15 years of experience
SELECT First_name, Last_name, Hire_date, Salary
FROM Employee
WHERE Manager_id IS NOT NULL
AND DATEDIFF(CURDATE(), Hire_date) > 15 * 365;  -- Assuming a year has 365 days
